pokemonnew = read.xlsx("Pokemon.csv", sheetIndex = 1)
Sys.setlocale("LC_ALL","C")
c(2,3,5,8,13)
Country = c("Brazil", "China", "India", "Switzerland", "USA")
lifeExpectancy = c(74,76,65,83,79)
Country
lifeExpectancy
Country[1]
lifeExpectancy[3]
seq(0,100,2)
seq(0,101,2)
CountryData = data.frame(Country,lifeExpectancy)
CountryData
CountryData$Population = c(199000, 1390000, 1240000, 7997, 318000)
CountryData
Country = c("Australia","Greece")
lifeExpectancy = c(82,81)
Population = (23050, 11125)
Population = c(23050, 11125)
NewCOuntryData = data.fram(Country, lifeExpectancy, Population)
NewCountryData = data.frame(Country, lifeExpectancy, Population)
NewCountryData
AllCountryData = rbind(CountryData, NewCountryData)
AllCountryData
AllNewCountry = rbind(NewCountryData, Country, NewCountryData)
AllNewCountry
setwd("C:/Users/User/Downloads")
getwd()
WHO = read.csv("Who.csv")
str(WHO)
summary(WHO)
WHO_Europe = subset(WHO, Region == "Euope")
WHO_Europe
head(WHO_Europe)
WHO_Europe = subset(WHO, Region == "Europe")
head(WHO_Europe)
summary(WHO_Europe)
write.csv(WHO_Europe, "WHO_Europe.csv")
ls()
rm(WHO_Europe)
ls
ls()
WHO$Under15
mean(WHO$Under15)
sd(WHO$Under15)
summary(WHO$Under15)
which.min(WHO$Under15)
WHO$Country[86]
which.max(WHO$Under15)
WHO$Country[124]
plot(WHO$GNI, WHO$FertilityRate)
Outliers = subset(WHO, GNI > 10000 & FertilityRate > 2.5)
nrow(Outliers)
Outliers[c("Country", "GNI", "FertilityRate")]
WHO
mean(WHO$Over60)
str(WHO)
which.min(WHO$Over60)
WHO$Country[183]
which.max(WHO$LiteracyRate)
WHO$Country[44]
WHO$LiteracyRate[44]
WHO_Europe = subset(WHO, Region == "Europe")
hist(WHO$CellularSubscribers)
boxplot(WHO$LifeExpectancy ~ WHO$Region)
?tapply
tapply(WHO$LiteracyRate, WHO$Region, mean, na.rm = TRUE)
str(WHO)
tapply(WHO$ChildMortality, WHO$Region, average)
tapply(WHO$ChildMortality, WHO$Region, mean)
sqrt(2)
ls()
rm(list=ls())
ls()
sqrt(2)
abs(-24)
?dim
HoursYear = 24*365
HoursYear
ls()
# Vectors and data frames ----
c(2,3,5,8,13)
c("Brazil","China","India","Switzerland","USA")
Country = c("Brazil","China","India","Switzerland","USA")
c(1:100)
LifeExpectancy = c(74,76,65,83,79)
Country[1]
CountryData = data.frame(Country,LifeExpectancy)
CountryData
CountryData$Population = c(199000,1390000,1240000,7997,318000)
CountryData
Country = c("Australia","Greece")
LifeExpectancy = c(82,81)
Population = c(23050,11125)
NewCountryData = data.frame(Country,LifeExpectancy,Population)
AllCountryData = rbind(CountryData, NewCountryData)
AllCountryData
getwd()
changewd()
setwd("~/MIT Analytics Edge/Week 1")
getwd() # Get working directory
WHO = read.csv("WHO.csv")
WHO
str(WHO)
summary(WHO)
WHO_Europe = subset(WHO, Region == "Europe")
WHO_Europe
summary(WHO_Europe)
write.csv(WHO_Europe, "WHO_Europe.csv")
rm(WHO_Europe)
WHO$Under15
mean(WHO$Under15)
sd(WHO$Under15)
summary(WHO$Under15)
summary(WHO$Under15) # Summary function can provide summary data for a specified variable
which.min(WHO$Under15)
WHO$Country[which.min(WHO$Under15)]
WHO$Country[86]
which.max(WHO$Under15)
WHO$Country[124]
plot(WHO$GNI, WHO$FertilityRate)
plot(WHO$GNI, WHO$FertilityRate) # Creates a scatterlpot with first variable in x-axis and second one in y-axis
Outliers = subset(WHO, GNI>10000 & FertilityRate > 2.5 )
Outliers
nrow(Outliers)
Outliers[c("Country","GNI","FertilityRate"]
Outliers[c("Country","GNI","FertilityRate"])
Outliers[c("Country","GNI","FertilityRate")]
hist(WHO$CellularSubscribers)
boxplot(WHO$LifeExpectancy)
?boxplot
boxplot(WHO$LifeExpectancy ~ WHO$Region)
boxplot(WHO$LifeExpectancy ~ WHO$Region) # Create a boxplot for first variable grouped by second variable
boxplot(WHO$LifeExpectancy ~ WHO$Region) # Create a boxplot for first variable grouped by second variable -- shows statistical range of a variable
boxplot(WHO$LifeExpectancy ~ WHO$Region, xlab = "", ylab = "Life Expectancy", main = "Life Expectancy of Countries by Region") # Box plot with labels
table(WHO$Region)
table(WHO$Region) # Summary table; works well for variables with less values
tapply(WHO$Over60,WHO$Region,mean)
tapply(WHO$Over60,WHO$Region,mean) # tapply function -- shows the third arg function of first variable grouped by the second variable
tapply(WHO$Over60,WHO$Region,mean) # tapply function -- shows the third arg function of first arg grouped by the second arg
apply(WHO$LiteracyRate,WHO$Region,min)
tapply(WHO$LiteracyRate,WHO$Region,min)
tapply(WHO$LiteracyRate,WHO$Region,min, rm.na=TRUE)
tapply(WHO$LiteracyRate,WHO$Region,min, na.rm=TRUE)
tapply(WHO$LiteracyRate,WHO$Region,min, na.rm=TRUE) # na.rm=TRUE removes the NA values from the dataset to bring the summary results
USDA = read.csv("USDA.csv")
USDA
str(USDA)
summary(USDA)
USDA$Sodium
which.max(USDA$Sodium)
USDA$Description[which.max(USDA$Sodium)]
names(USDA)
HighSodium = subset(USDA,Sodium>10000)
nrows(HighSodium)
nrow(HighSodium)
HighSodium$Description
HighSodium$Description
HighSodium
match("CAVIAR",USDA$Description)
match("CAVIAR",USDA$Description) # Match function to search for first arg in the second arg (vector)
match("Caviar",USDA$Description) # Match function to search for first arg in the second arg (vector)
match("CAVIAR",USDA$Description) # Match function to search for first arg in the second arg (vector)
USDA$Sodium[4154]
USDA$Sodium[match("CAVIAR",USDA$Description)]
summary(USDA$Sodium)
sd(USDA$Sodium)
sd(USDA$Sodium,na.rm=TRUE)
plot(USDA$Protein,USDA$TotalFat)
plot(USDA$Protein,USDA$TotalFat,xlab="Protein",ylab="Fat",main = "Protein vs Fat")
plot(USDA$Protein,USDA$TotalFat,xlab="Protein",ylab="Fat",main = "Protein vs Fat",col="red")
hist(USDA$VitaminC,xlab="Vitamin C (mg)",main = "Histogram of Vitamin C levels")
hist(USDA$VitaminC,xlab="Vitamin C (mg)",main = "Histogram of Vitamin C levels",xlim=c(0,100))
hist(USDA$VitaminC,xlab="Vitamin C (mg)",main = "Histogram of Vitamin C levels",xlim=c(0,100),breaks=100)
hist(USDA$VitaminC,xlab="Vitamin C (mg)",main = "Histogram of Vitamin C levels",xlim=c(0,100),breaks=2000)
boxplot(USDA$Sugar)
boxplot(USDA$Sugar,main = "Box plot of sugar levels")
boxplot(USDA$Sugar,main = "Box plot of sugar levels",ylab = "Sugar (g)")
USDA$Sodium[1] > mean(USDA$Sodium,na.rm=TRUE)
USDA$Sodium[50] > mean(USDA$Sodium,na.rm=TRUE)
HighSodium = USDA$Sodium > mean(USDA$Sodium,na.rm=TRUE)
head(HighSodium)
HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium,na.rm=TRUE)) # as.numeric function converts to numeric
head(HighSodium)
USDA$HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium,na.rm=TRUE))
str(USDA)
USDA$HighFat = as.numeric(USDA$Fat > mean(USDA$Fat,na.rm=TRUE))
USDA$HighFat = as.numeric(USDA$TotalFat > mean(USDA$TotalFat,na.rm=TRUE))
USDA$HighProtein = as.numeric(USDA$Protein > mean(USDA$Protein,na.rm=TRUE))
str(USDA)
USDA$HighCarbs = as.numeric(USDA$Carbohydrate > mean(USDA$Carbohydrate,na.rm=TRUE))
str(USDA)
table(USDA$HighSodium)
table(USDA$HighSodium,USDA$HighFat)
tapply(USDA$Iron, USDA$HighProtein,mean,na.rm=TRUE)
mvt = read.csv("mvtWeek1.csv")
str(mvt)
nrows(mvt)
nrow(mvt)
str(mvt)
max(mvt$ID)
min(mvt$Beat)
summary(mvt)
summary(mvt$Arrest)
summary(mvt$LocationDescription)
str(mvt)
mvt$Date[1]
DateConvert = as.Date(strptime(mvt$Date,"%m/%d/%y %H:%M"))
DateConvert
summary(DateConvert)
mvt$Month = months(DateConvert)
mvt$Month
mvt$Weekday = weekdays(DateConvert)
mvt$Weekday
mvt$Date
mvt$Date = DateConvert
mvt$Date
table(USDA$HighSodium)
table mvt$Weekday
table(mvt$Weekday)
table(mvt$Month)
table(mvt$Weekday)
table(USDA$HighSodium,USDA$HighFat)
table(mvt$Month, mvt$Arrest)
hist(mvt$Date,breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
Region
boxplot(WHO$LifeExpectancy ~ WHO$Region) # Create a boxplot for first variable grouped by second variable -- shows statistical range of a variable
boxplot(mvt$Arrest ~ mvt$Date)
boxplot(mvt$Arrest ~ mvt$Date)
# boxplot(mvt$Arrest ~ mvt$Date)
boxplot(mvt$Date ~ mvt$Arrest)
?table
table(mvt$Month, mvt$Arrest)
table(mvt$Date,mvt$Arrest)
?Years
?Year
?year
?years
?months
str(mvt)
table(mvt$Year,mvt$Arrest)
18517+2152
2152/20669
1212+13068
1212/14280
550+13542
550/14092
sort(table(mvt$LocationDescription))
?subset
Top5 = subset(mvt, LocationDescription == "STREET" |
LocationDescription == "PARKING LOT/GARAGE(NON.RESID.)" |
LocationDescription == "ALLEY" |
LocationDescription == "GAS STATION" |
LocationDescription == "DRIVEWAY - RESIDENTIAL")
Top5
mvt
str(Top5)
sort(table(mvt$LocationDescription))
156564+14852+2308+2111+1675
str(Top5)
str(Top5)
summary(Top5)
Top5$LocationDescription = factor(Top5$LocationDescription)
summary(Top5)
table(Top5$LocationDescription,Top5$Arrest)
summary(Top5$Arrest)
table(Top5$LocationDescription,Top5$Arrest)
249/2059
132/1543
439/1672
1603/13249
11595/144969
mvt
table(Top5$Weekday)
table(Top5$Weekday, mvt$LocationDescription)
table(Top5$Weekday, Top5$LocationDescription)
sort(table(Top5$Weekday, Top5$LocationDescription))
table(Top5$Weekday, Top5$LocationDescription)
IBM = read.csv(IBMStock.csv)
IBM = read.csv("IBMStock.csv")
GE = read.csv("GEStock.csv")
ProcterGamble = read.csv("ProcterGambleStock.csv")
CocaCola = read.csv("CocaColaStock.csv")
Boeing = read.csv("BoeingStock.csv")
str(GE)
head(GE)
IBM$Date = as.Date(IBM$Date, "%m/%d/%y")
GE$Date = as.Date(GE$Date, "%m/%d/%y")
CocaCola$Date = as.Date(CocaCola$Date, "%m/%d/%y")
ProcterGamble$Date = as.Date(ProcterGamble$Date, "%m/%d/%y")
Boeing$Date = as.Date(Boeing$Date, "%m/%d/%y")
str(GE)
str(ProcterGamble)
summary(GE)
nrow(GE)
head(GE)
480/12
summary(IBM)
summary(GE)
summary(CocaCola)
summary(Boeing)
summary(ProcterGamble)
sd(ProcterGamble$StockPrice)
plot(CocaCola$Date,CocaCola$StockPrice)
plot(CocaCola$Date,CocaCola$StockPrice,l)
plot(CocaCola$Date,CocaCola$StockPrice,"l")
plot(CocaCola$Date,CocaCola$StockPrice,"l")
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = "blue")
plot(CocaCola$Date,CocaCola$StockPrice,"l", col = "red")
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = "blue")
abline(v=as.Date(c("2000-03-01")), lwd=2)
abline(v=as.Date(c("2000-03-01")), lwd=1)
abline(v=as.Date(c("2000-03-01")), lwd=1)
abline(v=as.Date(c("2000-03-01")), lwd=2)
plot(CocaCola$Date[301:432],CocaCola$StockPrice[301:432],type="l",col="red",ylim=c(0,210))
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432],col="blue")
colors()
lines(GE$Date[301:432], GE$StockPrice[301:432],col="green")
lines(IBM$Date[301:432], IBM$StockPrice[301:432],col="yellow")
lines(IBM$Date[301:432], IBM$StockPrice[301:432],col="tan4")
lines(IBM$Date[301:432], IBM$StockPrice[301:432],col="purple4")
lines(IBM$Date[301:432], IBM$StockPrice[301:432],col="purple4")
lines(IBM$Date[301:432], IBM$StockPrice[301:432],col="purple")
lines(IBM$Date[301:432], IBM$StockPrice[301:432],col="purple3")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432],col="chocolate")
abline(v=as.Date(c("2000-03-01")), lwd=2)
plot(CocaCola$Date[301:432],CocaCola$StockPrice[301:432],type="l",col="red",ylim=c(0,210))
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432],col="blue")
lines(GE$Date[301:432], GE$StockPrice[301:432],col="green")
lines(IBM$Date[301:432], IBM$StockPrice[301:432],lty=2)
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432],lty=5)
abline(v=as.Date(c("2000-03-01")), lwd=2)
plot(CocaCola$Date[301:432],CocaCola$StockPrice[301:432],type="l",col="red",ylim=c(0,210))
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432],col="blue")
lines(GE$Date[301:432], GE$StockPrice[301:432],col="green")
lines(IBM$Date[301:432], IBM$StockPrice[301:432],lty=2)
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432],lty=5)
abline(v=as.Date(c("1997-09-01")), lwd=2)
abline(v=as.Date(c("1997-11-01")), lwd=2)
plot(CocaCola$Date[408:432],CocaCola$StockPrice[408:432],type="l",col="red",ylim=c(0,210))
lines(ProcterGamble$Date[408:432], ProcterGamble$StockPrice[408:432],col="blue")
lines(GE$Date[408:432], GE$StockPrice[408:432],col="green")
lines(IBM$Date[408:432], IBM$StockPrice[408:432],lty=2)
lines(Boeing$Date[408:432], Boeing$StockPrice[408:432],lty=5)
plot(CocaCola$Date[408:432],CocaCola$StockPrice[408:432],type="l",col="red",ylim=c(0,210))
lines(Boeing$Date[408:432], Boeing$StockPrice[408:432],lty=5)
tapply(IBM$StockPrice, months(IBM$Date))
table(Top5$LocationDescription,Top5$Arrest)
months(IBM$Date)
tapply(IBM$StockPrice, months(IBM$Date))
tapply(months(IBM$Date),IBM$StockPrice)
tapply(USDA$Iron, USDA$HighProtein,mean,na.rm=TRUE)
?tapply
tapply(IBM$StockPrice, months(IBM$Date), mean)
mean(IBM$StockPrice)
mean(GE$StockPrice)
tapply(GE$StockPrice, months(GE$Date), mean)
mean(CocaCola$StockPrice)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
mean(CocaCola$StockPrice)
tapply(GE$StockPrice, months(GE$Date), mean)
mean(GE$StockPrice)
tapply(IBM$StockPrice, months(IBM$Date), mean)
mean(IBM$StockPrice)
CPS = read.csv("CPSData.csv")
View(CPS)
summary(CPS)
str(CPS)
head(CPS)
sort(table(CPS$Region))
sort(table(CPS$State)
sort(table(CPS$State))
sort(table(CPS$State))
summary(CPS)
table(CPS$Citizenship)
116639+7073
123712+7590
123712/121302
123712/131302
table(CPS$Race, CPS$Hispanic)
summary(CPS)
summary(CPS$PeopleInHousehold)
is.na(CPS$Married)
table(CPS$Region,is.na(CPS$Married))
table(CPS$Sex,is.na(CPS$Married))
table(CPS$Citizenship,is.na(CPS$Married))
table(CPS$Age,is.na(CPS$Married))
table(CPS$State,is.na(CPS$MetroAreaCode))
head(CPS)
table(CPS)
table(CPS$MetroAreaCode)
is.na(CPS$MetroAreaCode)
table(CPS$State,is.na(CPS$MetroAreaCode))
is.na(CPS$MetroAreaCode) # Returns
table(CPS$State,is.na(CPS$MetroAreaCode))
subset(CPS,CPS$MetroAreaCode=="NA")
subset(CPS,CPS$MetroAreaCode==NA)
subset(CPS,is.na(CPS$MetroAreaCode)
subset(CPS,is.na(CPS$MetroAreaCode))
subset(CPS,is.na(CPS$MetroAreaCode))
table(CPS$State,is.na(CPS$MetroAreaCode))
subset(CPS,is.na(CPS$MetroAreaCode) & CPS$State = "Rhode Island")
subset(CPS,is.na(CPS$MetroAreaCode) & CPS$State == "Rhode Island")
nrow(subset(CPS,is.na(CPS$MetroAreaCode) & CPS$State == "District of Columbia"))
subset(CPS,is.na(CPS$MetroAreaCode) & CPS$State == "District of Columbia")
subset(CPS,is.na(CPS$MetroAreaCode) & CPS$State == "Wyoming")
table(CPS$State,is.na(CPS$MetroAreaCode))
subset(CPS,is.not.na(CPS$MetroAreaCode) & CPS$State == "Wyoming")
subset(CPS,!is.na(CPS$MetroAreaCode) & CPS$State == "Wyoming")
nrow(subset(CPS,!is.na(CPS$MetroAreaCode) & CPS$State == "Rhode Island"))
nrow(subset(CPS,CPS$State == "Rhode Island"))
table(CPS$State,is.na(CPS$MetroAreaCode))
table(CPS$Region,is.na(CPS$MetroAreaCode))
mean(c(TRUE, FALSE, TRUE, TRUE))
mean(c(TRUE, FALSE, FALSE, TRUE))
mean(c(TRUE, FALSE, FALSE, TRUE,FALSE))
tapply(is.na(CPS$MetroAreaCode), CPS$State, mean)
sort(tapply(is.na(CPS$MetroAreaCode), CPS$State, mean))
MetroAreaMap = read.csv("MetroAreaCodes.csv")
CountryMap = read.csv("CountryCodes.csv")
summary(CountryMap)
str(CountryMap)
summary(MetroAreaMap)
str(MetroAreaMap)
CPS = merge(CPS,MetroAreaMap,by.x="MetroAreaCode",by.y="Code",all.x = TRUE)
summary(CPS)
table(CPS$MetroArea)
table(is.na(CPS$MetroArea)
table(is.na(CPS$MetroArea))
table(is.na(CPS$MetroArea))
sort(table(CPS$MetroArea))
CPS$Hispanic
tapply(CPS$Hispanic,CPS$MetroArea,mean)
sort(tapply(CPS$Hispanic,CPS$MetroArea,mean))
sort(tapply(CPS$Race == "Asian",CPS$MetroArea,mean))
mean(c(TRUE, FALSE, FALSE, TRUE,FALSE))
sort(tapply(CPS$Race == "Asian",CPS$MetroArea,mean))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean,na.rm=TRUE))
summary(CPS)
summary(CountryMap)
CPS = merge(CPS,CountryMap,by.x="CountryOfBirthCode",by.y="Code",all.x = TRUE)
summary(CPS)
table(is.na(CPS$Country))
table(CPS$Country)
sort(table(CPS$Country))
table(CPS$MetroArea = "New York-Northern New Jersey-Long Island, NY-NJ-PA")
table(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA")
tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA",CPS$Country,mean,na.rm=TRUE)
NYInterviwees = subset(CPS,CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA")
nrow(NYInterviwees)
# tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA",CPS$Country,mean,na.rm=TRUE)
tapply(CPS$Country == "United States", CPS$MetroArea,mean,na.rm=TRUE)
1-0.6913397
# tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA",CPS$Country,mean,na.rm=TRUE)
tapply(CPS$Country !== "United States", CPS$MetroArea,mean,na.rm=TRUE)
# tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA",CPS$Country,mean,na.rm=TRUE)
tapply(CPS$Country != "United States", CPS$MetroArea,mean,na.rm=TRUE)
tapply(CPS$Country, CPS$MetroArea)
table(CPS$Country, CPS$MetroArea)
tapply(CPS$Country == "India", CPS$MetroArea,mean,na.rm=TRUE)
sort(tapply(CPS$Country == "India", CPS$MetroArea,mean,na.rm=TRUE))
sort(tapply(CPS$Country == "India", CPS$MetroArea,NULL,na.rm=TRUE))
sort(tapply(CPS$Country == "India", CPS$MetroArea,sum,na.rm=TRUE))
sort(tapply(CPS$Country == "Brazil", CPS$MetroArea,sum,na.rm=TRUE))
sort(tapply(CPS$Country == "Somalia", CPS$MetroArea,sum,na.rm=TRUE))
poll = read.csv("AnonymityPoll.csv")
str(poll)
summary(poll)
table(poll$Smartphone)
nrow(is.na(poll$Smartphone))
table(poll$Sex, poll$Region)
table(poll$State, poll$Region)
table(poll$Region,poll$State)
table(poll$Internet.Use == "1")
table(poll$Internet.Use == "1",poll$Smartphone=="1")
table(is.na(poll$Internet.Use))
table(is.na(poll$Smartphone))
limited = subset(poll,poll$Internet.Use=="1" | poll$Smartphone == "1")
str(limited)
summary(limited)
table(poll$Info.On.Internet)
table(limited$Info.On.Internet)
summary(limited)
table(limited$Info.On.Internet)
table(limited$Worry.About.Info)
table(limited$Worry.About.Info=="1")
386/(386+404)
table(limited$Anonymity.Possible)
278/(278+475)
table(limited$Tried.Masking.Identity)
128/(656+128)
table(limited$Privacy.Laws.Effective)
186/(186+541)
hist(limited$Age)
table(limited$Age, limited$Info.On.Internet)
max(table(limited$Age, limited$Info.On.Internet))
jitter(c(1, 2, 3))
jitter(c(1, 2, 3))
?jitter
plot(limited$Age, limited$Info.On.Internet)
plot(jitter(limited$Age), jitter(limited$Info.On.Internet))
tapply(limited$Info.On.Internet,limited$Smartphone)
tapply(limited$Info.On.Internet,limited$Smartphone,sum)
tapply(limited$Info.On.Internet,limited$Smartphone,sum,na.rm=TRUE)
tapply(limited$Info.On.Internet,limited$Smartphone,mean,na.rm=TRUE)
tapply(limited$Tried.Masking.Identity,limited$Smartphone,mean,na.rm=TRUE)
tapply(limited$Tried.Masking.Identity,limited$Smartphone,mean)
tapply(limited$Tried.Masking.Identity,limited$Smartphone,mean,na.rm=TRUE)
